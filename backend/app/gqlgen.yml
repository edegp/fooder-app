# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - "graph/*.graphql"

exec:
  filename: graph/generated.go
  package: graph
# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
# model:
#   filename: graph/model/models_gen.go
#   package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: resolver
  package: resolver

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true


# gqlgenは生成されたentパッケージ内のスキーマに含まれる型名を
# 検索する。 一致すればそれを使い、そうでなければ新しいものを使う
autobind:
  - "backend/app/ent"
  - "backend/app/ent/user"
  - "backend/app/ent/record"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Uint64:
    model:
      - github.com/99designs/gqlgen/graphql.Uint64
  Node:
    model:
      # ent.Noderは、Nodeテンプレートが生成する新しいインターフェースである
      - "backend/app/ent.Noder"
