directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateRecordInput is used for create Record object.
Input was generated by ent.
"""
input CreateRecordInput {
  visitAt: Time
  paymentAmount: Int
  leaveAt: Int
  evaluation: Int
  userID: ID!
  storeID: ID!
}
"""
CreateStoreInput is used for create Store object.
Input was generated by ent.
"""
input CreateStoreInput {
  name: String!
  categoryID: Int!
  subCategoryID: Int!
  price: Int!
  payments: [String!]!
  scale: Int!
  address: String!
  rating: Int!
  nearbyStores: [String!]!
  businessHours: [Int!]!
  types: [String!]!
  recordIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  age: Int
  createAt: Time
  latestLoginAt: Time
  recordIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "backend/app/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  records: [Record!]!
  stores: [Store!]!
  users: [User!]!
}
type Record implements Node {
  id: ID!
  userID: ID!
  placeID: ID!
  visitAt: Time!
  paymentAmount: Int
  leaveAt: Int
  evaluation: Int!
  user: User!
  store: Store!
}
"""Ordering options for Record connections"""
input RecordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Records."""
  field: RecordOrderField!
}
"""Properties by which Record connections can be ordered."""
enum RecordOrderField {
  VISIT_AT
  PAYMENT_AMOUNT
  EVALUATION
}
"""
RecordWhereInput is used for filtering Record objects.
Input was generated by ent.
"""
input RecordWhereInput {
  not: RecordWhereInput
  and: [RecordWhereInput!]
  or: [RecordWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID
  """place_id field predicates"""
  placeID: ID
  placeIDNEQ: ID
  placeIDIn: [ID!]
  placeIDNotIn: [ID!]
  placeIDGT: ID
  placeIDGTE: ID
  placeIDLT: ID
  placeIDLTE: ID
  placeIDContains: ID
  placeIDHasPrefix: ID
  placeIDHasSuffix: ID
  placeIDEqualFold: ID
  placeIDContainsFold: ID
  """visit_at field predicates"""
  visitAt: Time
  visitAtNEQ: Time
  visitAtIn: [Time!]
  visitAtNotIn: [Time!]
  visitAtGT: Time
  visitAtGTE: Time
  visitAtLT: Time
  visitAtLTE: Time
  """payment_amount field predicates"""
  paymentAmount: Int
  paymentAmountNEQ: Int
  paymentAmountIn: [Int!]
  paymentAmountNotIn: [Int!]
  paymentAmountGT: Int
  paymentAmountGTE: Int
  paymentAmountLT: Int
  paymentAmountLTE: Int
  paymentAmountIsNil: Boolean
  paymentAmountNotNil: Boolean
  """leave_at field predicates"""
  leaveAt: Int
  leaveAtNEQ: Int
  leaveAtIn: [Int!]
  leaveAtNotIn: [Int!]
  leaveAtGT: Int
  leaveAtGTE: Int
  leaveAtLT: Int
  leaveAtLTE: Int
  leaveAtIsNil: Boolean
  leaveAtNotNil: Boolean
  """evaluation field predicates"""
  evaluation: Int
  evaluationNEQ: Int
  evaluationIn: [Int!]
  evaluationNotIn: [Int!]
  evaluationGT: Int
  evaluationGTE: Int
  evaluationLT: Int
  evaluationLTE: Int
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """store edge predicates"""
  hasStore: Boolean
  hasStoreWith: [StoreWhereInput!]
}
type Store implements Node {
  id: ID!
  name: String!
  categoryID: Int!
  subCategoryID: Int!
  price: Int!
  payments: [String!]!
  scale: Int!
  address: String!
  rating: Int!
  nearbyStores: [String!]!
  businessHours: [Int!]!
  types: [String!]!
  record: [Record!]
}
"""
StoreWhereInput is used for filtering Store objects.
Input was generated by ent.
"""
input StoreWhereInput {
  not: StoreWhereInput
  and: [StoreWhereInput!]
  or: [StoreWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """category_id field predicates"""
  categoryID: Int
  categoryIDNEQ: Int
  categoryIDIn: [Int!]
  categoryIDNotIn: [Int!]
  categoryIDGT: Int
  categoryIDGTE: Int
  categoryIDLT: Int
  categoryIDLTE: Int
  """sub_category_id field predicates"""
  subCategoryID: Int
  subCategoryIDNEQ: Int
  subCategoryIDIn: [Int!]
  subCategoryIDNotIn: [Int!]
  subCategoryIDGT: Int
  subCategoryIDGTE: Int
  subCategoryIDLT: Int
  subCategoryIDLTE: Int
  """price field predicates"""
  price: Int
  priceNEQ: Int
  priceIn: [Int!]
  priceNotIn: [Int!]
  priceGT: Int
  priceGTE: Int
  priceLT: Int
  priceLTE: Int
  """scale field predicates"""
  scale: Int
  scaleNEQ: Int
  scaleIn: [Int!]
  scaleNotIn: [Int!]
  scaleGT: Int
  scaleGTE: Int
  scaleLT: Int
  scaleLTE: Int
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """rating field predicates"""
  rating: Int
  ratingNEQ: Int
  ratingIn: [Int!]
  ratingNotIn: [Int!]
  ratingGT: Int
  ratingGTE: Int
  ratingLT: Int
  ratingLTE: Int
  """record edge predicates"""
  hasRecord: Boolean
  hasRecordWith: [RecordWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateRecordInput is used for update Record object.
Input was generated by ent.
"""
input UpdateRecordInput {
  visitAt: Time
  paymentAmount: Int
  clearPaymentAmount: Boolean
  leaveAt: Int
  clearLeaveAt: Boolean
  evaluation: Int
  userID: ID
  clearUser: Boolean
  storeID: ID
  clearStore: Boolean
}
"""
UpdateStoreInput is used for update Store object.
Input was generated by ent.
"""
input UpdateStoreInput {
  name: String
  categoryID: Int
  subCategoryID: Int
  price: Int
  payments: [String!]
  appendPayments: [String!]
  scale: Int
  address: String
  rating: Int
  nearbyStores: [String!]
  appendNearbyStores: [String!]
  businessHours: [Int!]
  appendBusinessHours: [Int!]
  types: [String!]
  appendTypes: [String!]
  addRecordIDs: [ID!]
  removeRecordIDs: [ID!]
  clearRecord: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  age: Int
  clearAge: Boolean
  latestLoginAt: Time
  addRecordIDs: [ID!]
  removeRecordIDs: [ID!]
  clearRecord: Boolean
}
type User implements Node {
  id: ID!
  age: Int
  createAt: Time!
  latestLoginAt: Time!
  record: [Record!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  AGE
  CREATED_AT
  LATEST_LOGIN_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """age field predicates"""
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
  ageIsNil: Boolean
  ageNotNil: Boolean
  """create_at field predicates"""
  createAt: Time
  createAtNEQ: Time
  createAtIn: [Time!]
  createAtNotIn: [Time!]
  createAtGT: Time
  createAtGTE: Time
  createAtLT: Time
  createAtLTE: Time
  """latest_login_at field predicates"""
  latestLoginAt: Time
  latestLoginAtNEQ: Time
  latestLoginAtIn: [Time!]
  latestLoginAtNotIn: [Time!]
  latestLoginAtGT: Time
  latestLoginAtGTE: Time
  latestLoginAtLT: Time
  latestLoginAtLTE: Time
  """record edge predicates"""
  hasRecord: Boolean
  hasRecordWith: [RecordWhereInput!]
}
