package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"backend/app/ent"
	"backend/app/ent/record"
	"backend/app/graph"
	"context"
)

// CreateRecord is the resolver for the createRecord field.
func (r *mutationResolver) CreateRecord(ctx context.Context, userID string, placeID string) (*ent.Record, error) {
	client := ent.FromContext(ctx)
	return client.Debug().Record.Create().SetUserID(userID).SetPlaceID(placeID).Save(ctx)
}

// UpdateRecord is the resolver for the updateRecord field.
func (r *mutationResolver) UpdateRecord(ctx context.Context, id string, userID *string, placeID *string, paymentAmount *int, evaluation *int) (*ent.Record, error) {
	client := ent.FromContext(ctx)
	record := client.Debug().Record.UpdateOneID(id)
	if paymentAmount != nil {
		record.SetPaymentAmount(*paymentAmount)
	}
	if evaluation != nil {
		record.SetEvaluation(*evaluation)
	}
	return record.Save(ctx)
}

// GetUserRecords is the resolver for the getUserRecords field.
func (r *queryResolver) GetUserRecords(ctx context.Context, userID string) ([]*ent.Record, error) {
	client := ent.FromContext(ctx)
	return client.Record.Query().Where(record.UserIDEQ(userID)).All(ctx)
}

// GetPlaceRecords is the resolver for the getPlaceRecords field.
func (r *queryResolver) GetPlaceRecords(ctx context.Context, placeID string) ([]*ent.Record, error) {
	client := ent.FromContext(ctx)
	return client.Record.Query().Where(record.PlaceIDEQ(placeID)).All(ctx)
}

// GetUserParticularPlaceRecords is the resolver for the getUserParticularPlaceRecords field.
func (r *queryResolver) GetUserParticularPlaceRecords(ctx context.Context, userID string, placeID string) ([]*ent.Record, error) {
	client := ent.FromContext(ctx)
	return client.Record.Query().Where(record.PlaceIDEQ(placeID), record.UserIDEQ(userID)).All(ctx)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
