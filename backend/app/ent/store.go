// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/store"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// SubCategoryID holds the value of the "sub_category_id" field.
	SubCategoryID int `json:"sub_category_id,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Payments holds the value of the "payments" field.
	Payments []string `json:"payments,omitempty"`
	// Scale holds the value of the "scale" field.
	Scale int `json:"scale,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// NearbyStores holds the value of the "nearby_stores" field.
	NearbyStores []string `json:"nearby_stores,omitempty"`
	// BusinessHours holds the value of the "business_hours" field.
	BusinessHours []int `json:"business_hours,omitempty"`
	// Types holds the value of the "types" field.
	Types []string `json:"types,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoreQuery when eager-loading is set.
	Edges StoreEdges `json:"edges"`
}

// StoreEdges holds the relations/edges for other nodes in the graph.
type StoreEdges struct {
	// Record holds the value of the record edge.
	Record []*Record `json:"record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedRecord map[string][]*Record
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) RecordOrErr() ([]*Record, error) {
	if e.loadedTypes[0] {
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldPayments, store.FieldNearbyStores, store.FieldBusinessHours, store.FieldTypes:
			values[i] = new([]byte)
		case store.FieldCategoryID, store.FieldSubCategoryID, store.FieldPrice, store.FieldScale, store.FieldRating:
			values[i] = new(sql.NullInt64)
		case store.FieldID, store.FieldName, store.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Store", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case store.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case store.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				s.CategoryID = int(value.Int64)
			}
		case store.FieldSubCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_category_id", values[i])
			} else if value.Valid {
				s.SubCategoryID = int(value.Int64)
			}
		case store.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = int(value.Int64)
			}
		case store.FieldPayments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Payments); err != nil {
					return fmt.Errorf("unmarshal field payments: %w", err)
				}
			}
		case store.FieldScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scale", values[i])
			} else if value.Valid {
				s.Scale = int(value.Int64)
			}
		case store.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case store.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				s.Rating = int(value.Int64)
			}
		case store.FieldNearbyStores:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nearby_stores", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.NearbyStores); err != nil {
					return fmt.Errorf("unmarshal field nearby_stores: %w", err)
				}
			}
		case store.FieldBusinessHours:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_hours", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.BusinessHours); err != nil {
					return fmt.Errorf("unmarshal field business_hours: %w", err)
				}
			}
		case store.FieldTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Types); err != nil {
					return fmt.Errorf("unmarshal field types: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryRecord queries the "record" edge of the Store entity.
func (s *Store) QueryRecord() *RecordQuery {
	return NewStoreClient(s.config).QueryRecord(s)
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return NewStoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Store is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("sub_category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SubCategoryID))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", ")
	builder.WriteString("payments=")
	builder.WriteString(fmt.Sprintf("%v", s.Payments))
	builder.WriteString(", ")
	builder.WriteString("scale=")
	builder.WriteString(fmt.Sprintf("%v", s.Scale))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", s.Rating))
	builder.WriteString(", ")
	builder.WriteString("nearby_stores=")
	builder.WriteString(fmt.Sprintf("%v", s.NearbyStores))
	builder.WriteString(", ")
	builder.WriteString("business_hours=")
	builder.WriteString(fmt.Sprintf("%v", s.BusinessHours))
	builder.WriteString(", ")
	builder.WriteString("types=")
	builder.WriteString(fmt.Sprintf("%v", s.Types))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRecord returns the Record named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Store) NamedRecord(name string) ([]*Record, error) {
	if s.Edges.namedRecord == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedRecord[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Store) appendNamedRecord(name string, edges ...*Record) {
	if s.Edges.namedRecord == nil {
		s.Edges.namedRecord = make(map[string][]*Record)
	}
	if len(edges) == 0 {
		s.Edges.namedRecord[name] = []*Record{}
	} else {
		s.Edges.namedRecord[name] = append(s.Edges.namedRecord[name], edges...)
	}
}

// Stores is a parsable slice of Store.
type Stores []*Store
