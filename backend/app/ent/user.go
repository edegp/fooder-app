// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// LatestLoginAt holds the value of the "latest_login_at" field.
	LatestLoginAt time.Time `json:"latest_login_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Record holds the value of the record edge.
	Record []*Record `json:"record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedRecord map[string][]*Record
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RecordOrErr() ([]*Record, error) {
	if e.loadedTypes[0] {
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAge:
			values[i] = new(sql.NullInt64)
		case user.FieldID:
			values[i] = new(sql.NullString)
		case user.FieldCreateAt, user.FieldLatestLoginAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = int(value.Int64)
			}
		case user.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				u.CreateAt = value.Time
			}
		case user.FieldLatestLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field latest_login_at", values[i])
			} else if value.Valid {
				u.LatestLoginAt = value.Time
			}
		}
	}
	return nil
}

// QueryRecord queries the "record" edge of the User entity.
func (u *User) QueryRecord() *RecordQuery {
	return NewUserClient(u.config).QueryRecord(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(u.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("latest_login_at=")
	builder.WriteString(u.LatestLoginAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRecord returns the Record named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRecord(name string) ([]*Record, error) {
	if u.Edges.namedRecord == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRecord[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRecord(name string, edges ...*Record) {
	if u.Edges.namedRecord == nil {
		u.Edges.namedRecord = make(map[string][]*Record)
	}
	if len(edges) == 0 {
		u.Edges.namedRecord[name] = []*Record{}
	} else {
		u.Edges.namedRecord[name] = append(u.Edges.namedRecord[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
