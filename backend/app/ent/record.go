// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/record"
	"backend/app/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// PlaceID holds the value of the "place_id" field.
	PlaceID string `json:"place_id,omitempty"`
	// VisitAt holds the value of the "visit_at" field.
	VisitAt time.Time `json:"visit_at,omitempty"`
	// PaymentAmount holds the value of the "payment_amount" field.
	PaymentAmount int `json:"payment_amount,omitempty"`
	// LeaveAt holds the value of the "leave_at" field.
	LeaveAt int `json:"leave_at,omitempty"`
	// Evaluation holds the value of the "evaluation" field.
	Evaluation int `json:"evaluation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges RecordEdges `json:"edges"`
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldPaymentAmount, record.FieldLeaveAt, record.FieldEvaluation:
			values[i] = new(sql.NullInt64)
		case record.FieldID, record.FieldUserID, record.FieldPlaceID:
			values[i] = new(sql.NullString)
		case record.FieldVisitAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Record", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case record.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = value.String
			}
		case record.FieldPlaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_id", values[i])
			} else if value.Valid {
				r.PlaceID = value.String
			}
		case record.FieldVisitAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field visit_at", values[i])
			} else if value.Valid {
				r.VisitAt = value.Time
			}
		case record.FieldPaymentAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_amount", values[i])
			} else if value.Valid {
				r.PaymentAmount = int(value.Int64)
			}
		case record.FieldLeaveAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leave_at", values[i])
			} else if value.Valid {
				r.LeaveAt = int(value.Int64)
			}
		case record.FieldEvaluation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field evaluation", values[i])
			} else if value.Valid {
				r.Evaluation = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Record entity.
func (r *Record) QueryUser() *UserQuery {
	return NewRecordClient(r.config).QueryUser(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return NewRecordClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("user_id=")
	builder.WriteString(r.UserID)
	builder.WriteString(", ")
	builder.WriteString("place_id=")
	builder.WriteString(r.PlaceID)
	builder.WriteString(", ")
	builder.WriteString("visit_at=")
	builder.WriteString(r.VisitAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("payment_amount=")
	builder.WriteString(fmt.Sprintf("%v", r.PaymentAmount))
	builder.WriteString(", ")
	builder.WriteString("leave_at=")
	builder.WriteString(fmt.Sprintf("%v", r.LeaveAt))
	builder.WriteString(", ")
	builder.WriteString("evaluation=")
	builder.WriteString(fmt.Sprintf("%v", r.Evaluation))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record
