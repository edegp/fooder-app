// Code generated by ent, DO NOT EDIT.

package user

import (
	"backend/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDToken applies equality check predicate on the "id_token" field. It's identical to IDTokenEQ.
func IDToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDToken, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAt, v))
}

// LatestLoginAt applies equality check predicate on the "latest_login_at" field. It's identical to LatestLoginAtEQ.
func LatestLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLatestLoginAt, v))
}

// IDTokenEQ applies the EQ predicate on the "id_token" field.
func IDTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDToken, v))
}

// IDTokenNEQ applies the NEQ predicate on the "id_token" field.
func IDTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDToken, v))
}

// IDTokenIn applies the In predicate on the "id_token" field.
func IDTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIDToken, vs...))
}

// IDTokenNotIn applies the NotIn predicate on the "id_token" field.
func IDTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIDToken, vs...))
}

// IDTokenGT applies the GT predicate on the "id_token" field.
func IDTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIDToken, v))
}

// IDTokenGTE applies the GTE predicate on the "id_token" field.
func IDTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIDToken, v))
}

// IDTokenLT applies the LT predicate on the "id_token" field.
func IDTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIDToken, v))
}

// IDTokenLTE applies the LTE predicate on the "id_token" field.
func IDTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIDToken, v))
}

// IDTokenContains applies the Contains predicate on the "id_token" field.
func IDTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIDToken, v))
}

// IDTokenHasPrefix applies the HasPrefix predicate on the "id_token" field.
func IDTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIDToken, v))
}

// IDTokenHasSuffix applies the HasSuffix predicate on the "id_token" field.
func IDTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIDToken, v))
}

// IDTokenEqualFold applies the EqualFold predicate on the "id_token" field.
func IDTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIDToken, v))
}

// IDTokenContainsFold applies the ContainsFold predicate on the "id_token" field.
func IDTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIDToken, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateAt, v))
}

// LatestLoginAtEQ applies the EQ predicate on the "latest_login_at" field.
func LatestLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLatestLoginAt, v))
}

// LatestLoginAtNEQ applies the NEQ predicate on the "latest_login_at" field.
func LatestLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLatestLoginAt, v))
}

// LatestLoginAtIn applies the In predicate on the "latest_login_at" field.
func LatestLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLatestLoginAt, vs...))
}

// LatestLoginAtNotIn applies the NotIn predicate on the "latest_login_at" field.
func LatestLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLatestLoginAt, vs...))
}

// LatestLoginAtGT applies the GT predicate on the "latest_login_at" field.
func LatestLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLatestLoginAt, v))
}

// LatestLoginAtGTE applies the GTE predicate on the "latest_login_at" field.
func LatestLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLatestLoginAt, v))
}

// LatestLoginAtLT applies the LT predicate on the "latest_login_at" field.
func LatestLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLatestLoginAt, v))
}

// LatestLoginAtLTE applies the LTE predicate on the "latest_login_at" field.
func LatestLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLatestLoginAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
