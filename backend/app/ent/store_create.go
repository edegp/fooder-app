// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/record"
	"backend/app/ent/store"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *StoreCreate) SetName(s string) *StoreCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetCategoryID sets the "category_id" field.
func (sc *StoreCreate) SetCategoryID(i int) *StoreCreate {
	sc.mutation.SetCategoryID(i)
	return sc
}

// SetSubCategoryID sets the "sub_category_id" field.
func (sc *StoreCreate) SetSubCategoryID(i int) *StoreCreate {
	sc.mutation.SetSubCategoryID(i)
	return sc
}

// SetPrice sets the "price" field.
func (sc *StoreCreate) SetPrice(i int) *StoreCreate {
	sc.mutation.SetPrice(i)
	return sc
}

// SetPayments sets the "payments" field.
func (sc *StoreCreate) SetPayments(s []string) *StoreCreate {
	sc.mutation.SetPayments(s)
	return sc
}

// SetScale sets the "scale" field.
func (sc *StoreCreate) SetScale(i int) *StoreCreate {
	sc.mutation.SetScale(i)
	return sc
}

// SetAddress sets the "address" field.
func (sc *StoreCreate) SetAddress(s string) *StoreCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetRating sets the "rating" field.
func (sc *StoreCreate) SetRating(i int) *StoreCreate {
	sc.mutation.SetRating(i)
	return sc
}

// SetNearbyStores sets the "nearby_stores" field.
func (sc *StoreCreate) SetNearbyStores(s []string) *StoreCreate {
	sc.mutation.SetNearbyStores(s)
	return sc
}

// SetBusinessHours sets the "business_hours" field.
func (sc *StoreCreate) SetBusinessHours(i []int) *StoreCreate {
	sc.mutation.SetBusinessHours(i)
	return sc
}

// SetTypes sets the "types" field.
func (sc *StoreCreate) SetTypes(s []string) *StoreCreate {
	sc.mutation.SetTypes(s)
	return sc
}

// SetID sets the "id" field.
func (sc *StoreCreate) SetID(s string) *StoreCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StoreCreate) SetNillableID(s *string) *StoreCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddRecordIDs adds the "record" edge to the Record entity by IDs.
func (sc *StoreCreate) AddRecordIDs(ids ...string) *StoreCreate {
	sc.mutation.AddRecordIDs(ids...)
	return sc
}

// AddRecord adds the "record" edges to the Record entity.
func (sc *StoreCreate) AddRecord(r ...*Record) *StoreCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRecordIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	sc.defaults()
	return withHooks[*Store, StoreMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() {
	if _, ok := sc.mutation.ID(); !ok {
		v := store.DefaultID
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Store.name"`)}
	}
	if _, ok := sc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "Store.category_id"`)}
	}
	if _, ok := sc.mutation.SubCategoryID(); !ok {
		return &ValidationError{Name: "sub_category_id", err: errors.New(`ent: missing required field "Store.sub_category_id"`)}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Store.price"`)}
	}
	if _, ok := sc.mutation.Payments(); !ok {
		return &ValidationError{Name: "payments", err: errors.New(`ent: missing required field "Store.payments"`)}
	}
	if _, ok := sc.mutation.Scale(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required field "Store.scale"`)}
	}
	if _, ok := sc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Store.address"`)}
	}
	if _, ok := sc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Store.rating"`)}
	}
	if _, ok := sc.mutation.NearbyStores(); !ok {
		return &ValidationError{Name: "nearby_stores", err: errors.New(`ent: missing required field "Store.nearby_stores"`)}
	}
	if _, ok := sc.mutation.BusinessHours(); !ok {
		return &ValidationError{Name: "business_hours", err: errors.New(`ent: missing required field "Store.business_hours"`)}
	}
	if _, ok := sc.mutation.Types(); !ok {
		return &ValidationError{Name: "types", err: errors.New(`ent: missing required field "Store.types"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Store.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(store.Table, sqlgraph.NewFieldSpec(store.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.CategoryID(); ok {
		_spec.SetField(store.FieldCategoryID, field.TypeInt, value)
		_node.CategoryID = value
	}
	if value, ok := sc.mutation.SubCategoryID(); ok {
		_spec.SetField(store.FieldSubCategoryID, field.TypeInt, value)
		_node.SubCategoryID = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.SetField(store.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := sc.mutation.Payments(); ok {
		_spec.SetField(store.FieldPayments, field.TypeJSON, value)
		_node.Payments = value
	}
	if value, ok := sc.mutation.Scale(); ok {
		_spec.SetField(store.FieldScale, field.TypeInt, value)
		_node.Scale = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(store.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sc.mutation.Rating(); ok {
		_spec.SetField(store.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := sc.mutation.NearbyStores(); ok {
		_spec.SetField(store.FieldNearbyStores, field.TypeJSON, value)
		_node.NearbyStores = value
	}
	if value, ok := sc.mutation.BusinessHours(); ok {
		_spec.SetField(store.FieldBusinessHours, field.TypeJSON, value)
		_node.BusinessHours = value
	}
	if value, ok := sc.mutation.Types(); ok {
		_spec.SetField(store.FieldTypes, field.TypeJSON, value)
		_node.Types = value
	}
	if nodes := sc.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.RecordTable,
			Columns: []string{store.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	builders []*StoreCreate
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
