// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/record"
	"backend/app/ent/store"
	"backend/app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (rc *RecordCreate) SetUserID(s string) *RecordCreate {
	rc.mutation.SetUserID(s)
	return rc
}

// SetPlaceID sets the "place_id" field.
func (rc *RecordCreate) SetPlaceID(s string) *RecordCreate {
	rc.mutation.SetPlaceID(s)
	return rc
}

// SetVisitAt sets the "visit_at" field.
func (rc *RecordCreate) SetVisitAt(t time.Time) *RecordCreate {
	rc.mutation.SetVisitAt(t)
	return rc
}

// SetNillableVisitAt sets the "visit_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableVisitAt(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetVisitAt(*t)
	}
	return rc
}

// SetPaymentAmount sets the "payment_amount" field.
func (rc *RecordCreate) SetPaymentAmount(i int) *RecordCreate {
	rc.mutation.SetPaymentAmount(i)
	return rc
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (rc *RecordCreate) SetNillablePaymentAmount(i *int) *RecordCreate {
	if i != nil {
		rc.SetPaymentAmount(*i)
	}
	return rc
}

// SetLeaveAt sets the "leave_at" field.
func (rc *RecordCreate) SetLeaveAt(i int) *RecordCreate {
	rc.mutation.SetLeaveAt(i)
	return rc
}

// SetNillableLeaveAt sets the "leave_at" field if the given value is not nil.
func (rc *RecordCreate) SetNillableLeaveAt(i *int) *RecordCreate {
	if i != nil {
		rc.SetLeaveAt(*i)
	}
	return rc
}

// SetEvaluation sets the "evaluation" field.
func (rc *RecordCreate) SetEvaluation(i int) *RecordCreate {
	rc.mutation.SetEvaluation(i)
	return rc
}

// SetNillableEvaluation sets the "evaluation" field if the given value is not nil.
func (rc *RecordCreate) SetNillableEvaluation(i *int) *RecordCreate {
	if i != nil {
		rc.SetEvaluation(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(s string) *RecordCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RecordCreate) SetNillableID(s *string) *RecordCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RecordCreate) SetUser(u *User) *RecordCreate {
	return rc.SetUserID(u.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (rc *RecordCreate) SetStoreID(id string) *RecordCreate {
	rc.mutation.SetStoreID(id)
	return rc
}

// SetStore sets the "store" edge to the Store entity.
func (rc *RecordCreate) SetStore(s *Store) *RecordCreate {
	return rc.SetStoreID(s.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	rc.defaults()
	return withHooks[*Record, RecordMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.VisitAt(); !ok {
		v := record.DefaultVisitAt()
		rc.mutation.SetVisitAt(v)
	}
	if _, ok := rc.mutation.Evaluation(); !ok {
		v := record.DefaultEvaluation
		rc.mutation.SetEvaluation(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := record.DefaultID
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Record.user_id"`)}
	}
	if _, ok := rc.mutation.PlaceID(); !ok {
		return &ValidationError{Name: "place_id", err: errors.New(`ent: missing required field "Record.place_id"`)}
	}
	if _, ok := rc.mutation.VisitAt(); !ok {
		return &ValidationError{Name: "visit_at", err: errors.New(`ent: missing required field "Record.visit_at"`)}
	}
	if _, ok := rc.mutation.Evaluation(); !ok {
		return &ValidationError{Name: "evaluation", err: errors.New(`ent: missing required field "Record.evaluation"`)}
	}
	if v, ok := rc.mutation.Evaluation(); ok {
		if err := record.EvaluationValidator(v); err != nil {
			return &ValidationError{Name: "evaluation", err: fmt.Errorf(`ent: validator failed for field "Record.evaluation": %w`, err)}
		}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Record.user"`)}
	}
	if _, ok := rc.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store", err: errors.New(`ent: missing required edge "Record.store"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Record.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(record.Table, sqlgraph.NewFieldSpec(record.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.VisitAt(); ok {
		_spec.SetField(record.FieldVisitAt, field.TypeTime, value)
		_node.VisitAt = value
	}
	if value, ok := rc.mutation.PaymentAmount(); ok {
		_spec.SetField(record.FieldPaymentAmount, field.TypeInt, value)
		_node.PaymentAmount = value
	}
	if value, ok := rc.mutation.LeaveAt(); ok {
		_spec.SetField(record.FieldLeaveAt, field.TypeInt, value)
		_node.LeaveAt = value
	}
	if value, ok := rc.mutation.Evaluation(); ok {
		_spec.SetField(record.FieldEvaluation, field.TypeInt, value)
		_node.Evaluation = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.UserTable,
			Columns: []string{record.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.StoreTable,
			Columns: []string{record.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
