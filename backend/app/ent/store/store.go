// Code generated by ent, DO NOT EDIT.

package store

const (
	// Label holds the string label denoting the store type in the database.
	Label = "store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldSubCategoryID holds the string denoting the sub_category_id field in the database.
	FieldSubCategoryID = "sub_category_id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPayments holds the string denoting the payments field in the database.
	FieldPayments = "payments"
	// FieldScale holds the string denoting the scale field in the database.
	FieldScale = "scale"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldNearbyStores holds the string denoting the nearby_stores field in the database.
	FieldNearbyStores = "nearby_stores"
	// FieldBusinessHours holds the string denoting the business_hours field in the database.
	FieldBusinessHours = "business_hours"
	// FieldTypes holds the string denoting the types field in the database.
	FieldTypes = "types"
	// EdgeRecord holds the string denoting the record edge name in mutations.
	EdgeRecord = "record"
	// Table holds the table name of the store in the database.
	Table = "stores"
	// RecordTable is the table that holds the record relation/edge.
	RecordTable = "records"
	// RecordInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordInverseTable = "records"
	// RecordColumn is the table column denoting the record relation/edge.
	RecordColumn = "place_id"
)

// Columns holds all SQL columns for store fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCategoryID,
	FieldSubCategoryID,
	FieldPrice,
	FieldPayments,
	FieldScale,
	FieldAddress,
	FieldRating,
	FieldNearbyStores,
	FieldBusinessHours,
	FieldTypes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID string
)
