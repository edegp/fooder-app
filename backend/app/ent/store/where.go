// Code generated by ent, DO NOT EDIT.

package store

import (
	"backend/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldName, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCategoryID, v))
}

// SubCategoryID applies equality check predicate on the "sub_category_id" field. It's identical to SubCategoryIDEQ.
func SubCategoryID(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldSubCategoryID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldPrice, v))
}

// Scale applies equality check predicate on the "scale" field. It's identical to ScaleEQ.
func Scale(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldScale, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAddress, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldRating, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldName, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldCategoryID, v))
}

// SubCategoryIDEQ applies the EQ predicate on the "sub_category_id" field.
func SubCategoryIDEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldSubCategoryID, v))
}

// SubCategoryIDNEQ applies the NEQ predicate on the "sub_category_id" field.
func SubCategoryIDNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldSubCategoryID, v))
}

// SubCategoryIDIn applies the In predicate on the "sub_category_id" field.
func SubCategoryIDIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldSubCategoryID, vs...))
}

// SubCategoryIDNotIn applies the NotIn predicate on the "sub_category_id" field.
func SubCategoryIDNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldSubCategoryID, vs...))
}

// SubCategoryIDGT applies the GT predicate on the "sub_category_id" field.
func SubCategoryIDGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldSubCategoryID, v))
}

// SubCategoryIDGTE applies the GTE predicate on the "sub_category_id" field.
func SubCategoryIDGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldSubCategoryID, v))
}

// SubCategoryIDLT applies the LT predicate on the "sub_category_id" field.
func SubCategoryIDLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldSubCategoryID, v))
}

// SubCategoryIDLTE applies the LTE predicate on the "sub_category_id" field.
func SubCategoryIDLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldSubCategoryID, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldPrice, v))
}

// ScaleEQ applies the EQ predicate on the "scale" field.
func ScaleEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldScale, v))
}

// ScaleNEQ applies the NEQ predicate on the "scale" field.
func ScaleNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldScale, v))
}

// ScaleIn applies the In predicate on the "scale" field.
func ScaleIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldScale, vs...))
}

// ScaleNotIn applies the NotIn predicate on the "scale" field.
func ScaleNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldScale, vs...))
}

// ScaleGT applies the GT predicate on the "scale" field.
func ScaleGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldScale, v))
}

// ScaleGTE applies the GTE predicate on the "scale" field.
func ScaleGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldScale, v))
}

// ScaleLT applies the LT predicate on the "scale" field.
func ScaleLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldScale, v))
}

// ScaleLTE applies the LTE predicate on the "scale" field.
func ScaleLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldScale, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldAddress, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldRating, v))
}

// HasRecord applies the HasEdge predicate on the "record" edge.
func HasRecord() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordTable, RecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordWith applies the HasEdge predicate on the "record" edge with a given conditions (other predicates).
func HasRecordWith(preds ...predicate.Record) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordTable, RecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		p(s.Not())
	})
}
