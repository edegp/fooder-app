// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPlaceID holds the string denoting the place_id field in the database.
	FieldPlaceID = "place_id"
	// FieldVisitAt holds the string denoting the visit_at field in the database.
	FieldVisitAt = "visit_at"
	// FieldPaymentAmount holds the string denoting the payment_amount field in the database.
	FieldPaymentAmount = "payment_amount"
	// FieldLeaveAt holds the string denoting the leave_at field in the database.
	FieldLeaveAt = "leave_at"
	// FieldEvaluation holds the string denoting the evaluation field in the database.
	FieldEvaluation = "evaluation"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// Table holds the table name of the record in the database.
	Table = "records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "records"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "stores"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "place_id"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPlaceID,
	FieldVisitAt,
	FieldPaymentAmount,
	FieldLeaveAt,
	FieldEvaluation,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVisitAt holds the default value on creation for the "visit_at" field.
	DefaultVisitAt func() time.Time
	// DefaultEvaluation holds the default value on creation for the "evaluation" field.
	DefaultEvaluation int
	// EvaluationValidator is a validator for the "evaluation" field. It is called by the builders before save.
	EvaluationValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID string
)
