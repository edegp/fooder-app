// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/app/ent/predicate"
	"backend/app/ent/record"
	"backend/app/ent/store"
	"backend/app/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRecord = "Record"
	TypeStore  = "Store"
	TypeUser   = "User"
)

// RecordMutation represents an operation that mutates the Record nodes in the graph.
type RecordMutation struct {
	config
	op                Op
	typ               string
	id                *string
	visit_at          *time.Time
	payment_amount    *int
	addpayment_amount *int
	leave_at          *int
	addleave_at       *int
	evaluation        *int
	addevaluation     *int
	clearedFields     map[string]struct{}
	user              *string
	cleareduser       bool
	store             *string
	clearedstore      bool
	done              bool
	oldValue          func(context.Context) (*Record, error)
	predicates        []predicate.Record
}

var _ ent.Mutation = (*RecordMutation)(nil)

// recordOption allows management of the mutation configuration using functional options.
type recordOption func(*RecordMutation)

// newRecordMutation creates new mutation for the Record entity.
func newRecordMutation(c config, op Op, opts ...recordOption) *RecordMutation {
	m := &RecordMutation{
		config:        c,
		op:            op,
		typ:           TypeRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecordID sets the ID field of the mutation.
func withRecordID(id string) recordOption {
	return func(m *RecordMutation) {
		var (
			err   error
			once  sync.Once
			value *Record
		)
		m.oldValue = func(ctx context.Context) (*Record, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Record.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecord sets the old Record of the mutation.
func withRecord(node *Record) recordOption {
	return func(m *RecordMutation) {
		m.oldValue = func(context.Context) (*Record, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Record entities.
func (m *RecordMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecordMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecordMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Record.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *RecordMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RecordMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RecordMutation) ResetUserID() {
	m.user = nil
}

// SetPlaceID sets the "place_id" field.
func (m *RecordMutation) SetPlaceID(s string) {
	m.store = &s
}

// PlaceID returns the value of the "place_id" field in the mutation.
func (m *RecordMutation) PlaceID() (r string, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldPlaceID returns the old "place_id" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldPlaceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlaceID: %w", err)
	}
	return oldValue.PlaceID, nil
}

// ResetPlaceID resets all changes to the "place_id" field.
func (m *RecordMutation) ResetPlaceID() {
	m.store = nil
}

// SetVisitAt sets the "visit_at" field.
func (m *RecordMutation) SetVisitAt(t time.Time) {
	m.visit_at = &t
}

// VisitAt returns the value of the "visit_at" field in the mutation.
func (m *RecordMutation) VisitAt() (r time.Time, exists bool) {
	v := m.visit_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitAt returns the old "visit_at" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldVisitAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitAt: %w", err)
	}
	return oldValue.VisitAt, nil
}

// ResetVisitAt resets all changes to the "visit_at" field.
func (m *RecordMutation) ResetVisitAt() {
	m.visit_at = nil
}

// SetPaymentAmount sets the "payment_amount" field.
func (m *RecordMutation) SetPaymentAmount(i int) {
	m.payment_amount = &i
	m.addpayment_amount = nil
}

// PaymentAmount returns the value of the "payment_amount" field in the mutation.
func (m *RecordMutation) PaymentAmount() (r int, exists bool) {
	v := m.payment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAmount returns the old "payment_amount" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldPaymentAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAmount: %w", err)
	}
	return oldValue.PaymentAmount, nil
}

// AddPaymentAmount adds i to the "payment_amount" field.
func (m *RecordMutation) AddPaymentAmount(i int) {
	if m.addpayment_amount != nil {
		*m.addpayment_amount += i
	} else {
		m.addpayment_amount = &i
	}
}

// AddedPaymentAmount returns the value that was added to the "payment_amount" field in this mutation.
func (m *RecordMutation) AddedPaymentAmount() (r int, exists bool) {
	v := m.addpayment_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (m *RecordMutation) ClearPaymentAmount() {
	m.payment_amount = nil
	m.addpayment_amount = nil
	m.clearedFields[record.FieldPaymentAmount] = struct{}{}
}

// PaymentAmountCleared returns if the "payment_amount" field was cleared in this mutation.
func (m *RecordMutation) PaymentAmountCleared() bool {
	_, ok := m.clearedFields[record.FieldPaymentAmount]
	return ok
}

// ResetPaymentAmount resets all changes to the "payment_amount" field.
func (m *RecordMutation) ResetPaymentAmount() {
	m.payment_amount = nil
	m.addpayment_amount = nil
	delete(m.clearedFields, record.FieldPaymentAmount)
}

// SetLeaveAt sets the "leave_at" field.
func (m *RecordMutation) SetLeaveAt(i int) {
	m.leave_at = &i
	m.addleave_at = nil
}

// LeaveAt returns the value of the "leave_at" field in the mutation.
func (m *RecordMutation) LeaveAt() (r int, exists bool) {
	v := m.leave_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaveAt returns the old "leave_at" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldLeaveAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaveAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaveAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaveAt: %w", err)
	}
	return oldValue.LeaveAt, nil
}

// AddLeaveAt adds i to the "leave_at" field.
func (m *RecordMutation) AddLeaveAt(i int) {
	if m.addleave_at != nil {
		*m.addleave_at += i
	} else {
		m.addleave_at = &i
	}
}

// AddedLeaveAt returns the value that was added to the "leave_at" field in this mutation.
func (m *RecordMutation) AddedLeaveAt() (r int, exists bool) {
	v := m.addleave_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (m *RecordMutation) ClearLeaveAt() {
	m.leave_at = nil
	m.addleave_at = nil
	m.clearedFields[record.FieldLeaveAt] = struct{}{}
}

// LeaveAtCleared returns if the "leave_at" field was cleared in this mutation.
func (m *RecordMutation) LeaveAtCleared() bool {
	_, ok := m.clearedFields[record.FieldLeaveAt]
	return ok
}

// ResetLeaveAt resets all changes to the "leave_at" field.
func (m *RecordMutation) ResetLeaveAt() {
	m.leave_at = nil
	m.addleave_at = nil
	delete(m.clearedFields, record.FieldLeaveAt)
}

// SetEvaluation sets the "evaluation" field.
func (m *RecordMutation) SetEvaluation(i int) {
	m.evaluation = &i
	m.addevaluation = nil
}

// Evaluation returns the value of the "evaluation" field in the mutation.
func (m *RecordMutation) Evaluation() (r int, exists bool) {
	v := m.evaluation
	if v == nil {
		return
	}
	return *v, true
}

// OldEvaluation returns the old "evaluation" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldEvaluation(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvaluation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvaluation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvaluation: %w", err)
	}
	return oldValue.Evaluation, nil
}

// AddEvaluation adds i to the "evaluation" field.
func (m *RecordMutation) AddEvaluation(i int) {
	if m.addevaluation != nil {
		*m.addevaluation += i
	} else {
		m.addevaluation = &i
	}
}

// AddedEvaluation returns the value that was added to the "evaluation" field in this mutation.
func (m *RecordMutation) AddedEvaluation() (r int, exists bool) {
	v := m.addevaluation
	if v == nil {
		return
	}
	return *v, true
}

// ResetEvaluation resets all changes to the "evaluation" field.
func (m *RecordMutation) ResetEvaluation() {
	m.evaluation = nil
	m.addevaluation = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *RecordMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RecordMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RecordMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RecordMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetStoreID sets the "store" edge to the Store entity by id.
func (m *RecordMutation) SetStoreID(id string) {
	m.store = &id
}

// ClearStore clears the "store" edge to the Store entity.
func (m *RecordMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *RecordMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreID returns the "store" edge ID in the mutation.
func (m *RecordMutation) StoreID() (id string, exists bool) {
	if m.store != nil {
		return *m.store, true
	}
	return
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *RecordMutation) StoreIDs() (ids []string) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *RecordMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the RecordMutation builder.
func (m *RecordMutation) Where(ps ...predicate.Record) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Record, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Record).
func (m *RecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecordMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, record.FieldUserID)
	}
	if m.store != nil {
		fields = append(fields, record.FieldPlaceID)
	}
	if m.visit_at != nil {
		fields = append(fields, record.FieldVisitAt)
	}
	if m.payment_amount != nil {
		fields = append(fields, record.FieldPaymentAmount)
	}
	if m.leave_at != nil {
		fields = append(fields, record.FieldLeaveAt)
	}
	if m.evaluation != nil {
		fields = append(fields, record.FieldEvaluation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case record.FieldUserID:
		return m.UserID()
	case record.FieldPlaceID:
		return m.PlaceID()
	case record.FieldVisitAt:
		return m.VisitAt()
	case record.FieldPaymentAmount:
		return m.PaymentAmount()
	case record.FieldLeaveAt:
		return m.LeaveAt()
	case record.FieldEvaluation:
		return m.Evaluation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case record.FieldUserID:
		return m.OldUserID(ctx)
	case record.FieldPlaceID:
		return m.OldPlaceID(ctx)
	case record.FieldVisitAt:
		return m.OldVisitAt(ctx)
	case record.FieldPaymentAmount:
		return m.OldPaymentAmount(ctx)
	case record.FieldLeaveAt:
		return m.OldLeaveAt(ctx)
	case record.FieldEvaluation:
		return m.OldEvaluation(ctx)
	}
	return nil, fmt.Errorf("unknown Record field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case record.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case record.FieldPlaceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlaceID(v)
		return nil
	case record.FieldVisitAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitAt(v)
		return nil
	case record.FieldPaymentAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAmount(v)
		return nil
	case record.FieldLeaveAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaveAt(v)
		return nil
	case record.FieldEvaluation:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvaluation(v)
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecordMutation) AddedFields() []string {
	var fields []string
	if m.addpayment_amount != nil {
		fields = append(fields, record.FieldPaymentAmount)
	}
	if m.addleave_at != nil {
		fields = append(fields, record.FieldLeaveAt)
	}
	if m.addevaluation != nil {
		fields = append(fields, record.FieldEvaluation)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case record.FieldPaymentAmount:
		return m.AddedPaymentAmount()
	case record.FieldLeaveAt:
		return m.AddedLeaveAt()
	case record.FieldEvaluation:
		return m.AddedEvaluation()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case record.FieldPaymentAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentAmount(v)
		return nil
	case record.FieldLeaveAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLeaveAt(v)
		return nil
	case record.FieldEvaluation:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEvaluation(v)
		return nil
	}
	return fmt.Errorf("unknown Record numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(record.FieldPaymentAmount) {
		fields = append(fields, record.FieldPaymentAmount)
	}
	if m.FieldCleared(record.FieldLeaveAt) {
		fields = append(fields, record.FieldLeaveAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecordMutation) ClearField(name string) error {
	switch name {
	case record.FieldPaymentAmount:
		m.ClearPaymentAmount()
		return nil
	case record.FieldLeaveAt:
		m.ClearLeaveAt()
		return nil
	}
	return fmt.Errorf("unknown Record nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecordMutation) ResetField(name string) error {
	switch name {
	case record.FieldUserID:
		m.ResetUserID()
		return nil
	case record.FieldPlaceID:
		m.ResetPlaceID()
		return nil
	case record.FieldVisitAt:
		m.ResetVisitAt()
		return nil
	case record.FieldPaymentAmount:
		m.ResetPaymentAmount()
		return nil
	case record.FieldLeaveAt:
		m.ResetLeaveAt()
		return nil
	case record.FieldEvaluation:
		m.ResetEvaluation()
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, record.EdgeUser)
	}
	if m.store != nil {
		edges = append(edges, record.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case record.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case record.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, record.EdgeUser)
	}
	if m.clearedstore {
		edges = append(edges, record.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecordMutation) EdgeCleared(name string) bool {
	switch name {
	case record.EdgeUser:
		return m.cleareduser
	case record.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecordMutation) ClearEdge(name string) error {
	switch name {
	case record.EdgeUser:
		m.ClearUser()
		return nil
	case record.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Record unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecordMutation) ResetEdge(name string) error {
	switch name {
	case record.EdgeUser:
		m.ResetUser()
		return nil
	case record.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown Record edge %s", name)
}

// StoreMutation represents an operation that mutates the Store nodes in the graph.
type StoreMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	name                 *string
	category_id          *int
	addcategory_id       *int
	sub_category_id      *int
	addsub_category_id   *int
	price                *int
	addprice             *int
	payments             *[]string
	appendpayments       []string
	scale                *int
	addscale             *int
	address              *string
	rating               *int
	addrating            *int
	nearby_stores        *[]string
	appendnearby_stores  []string
	business_hours       *[]int
	appendbusiness_hours []int
	types                *[]string
	appendtypes          []string
	clearedFields        map[string]struct{}
	record               map[string]struct{}
	removedrecord        map[string]struct{}
	clearedrecord        bool
	done                 bool
	oldValue             func(context.Context) (*Store, error)
	predicates           []predicate.Store
}

var _ ent.Mutation = (*StoreMutation)(nil)

// storeOption allows management of the mutation configuration using functional options.
type storeOption func(*StoreMutation)

// newStoreMutation creates new mutation for the Store entity.
func newStoreMutation(c config, op Op, opts ...storeOption) *StoreMutation {
	m := &StoreMutation{
		config:        c,
		op:            op,
		typ:           TypeStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreID sets the ID field of the mutation.
func withStoreID(id string) storeOption {
	return func(m *StoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Store
		)
		m.oldValue = func(ctx context.Context) (*Store, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Store.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStore sets the old Store of the mutation.
func withStore(node *Store) storeOption {
	return func(m *StoreMutation) {
		m.oldValue = func(context.Context) (*Store, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Store entities.
func (m *StoreMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoreMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoreMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Store.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *StoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StoreMutation) ResetName() {
	m.name = nil
}

// SetCategoryID sets the "category_id" field.
func (m *StoreMutation) SetCategoryID(i int) {
	m.category_id = &i
	m.addcategory_id = nil
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *StoreMutation) CategoryID() (r int, exists bool) {
	v := m.category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// AddCategoryID adds i to the "category_id" field.
func (m *StoreMutation) AddCategoryID(i int) {
	if m.addcategory_id != nil {
		*m.addcategory_id += i
	} else {
		m.addcategory_id = &i
	}
}

// AddedCategoryID returns the value that was added to the "category_id" field in this mutation.
func (m *StoreMutation) AddedCategoryID() (r int, exists bool) {
	v := m.addcategory_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *StoreMutation) ResetCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
}

// SetSubCategoryID sets the "sub_category_id" field.
func (m *StoreMutation) SetSubCategoryID(i int) {
	m.sub_category_id = &i
	m.addsub_category_id = nil
}

// SubCategoryID returns the value of the "sub_category_id" field in the mutation.
func (m *StoreMutation) SubCategoryID() (r int, exists bool) {
	v := m.sub_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubCategoryID returns the old "sub_category_id" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldSubCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubCategoryID: %w", err)
	}
	return oldValue.SubCategoryID, nil
}

// AddSubCategoryID adds i to the "sub_category_id" field.
func (m *StoreMutation) AddSubCategoryID(i int) {
	if m.addsub_category_id != nil {
		*m.addsub_category_id += i
	} else {
		m.addsub_category_id = &i
	}
}

// AddedSubCategoryID returns the value that was added to the "sub_category_id" field in this mutation.
func (m *StoreMutation) AddedSubCategoryID() (r int, exists bool) {
	v := m.addsub_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubCategoryID resets all changes to the "sub_category_id" field.
func (m *StoreMutation) ResetSubCategoryID() {
	m.sub_category_id = nil
	m.addsub_category_id = nil
}

// SetPrice sets the "price" field.
func (m *StoreMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *StoreMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *StoreMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *StoreMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *StoreMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetPayments sets the "payments" field.
func (m *StoreMutation) SetPayments(s []string) {
	m.payments = &s
	m.appendpayments = nil
}

// Payments returns the value of the "payments" field in the mutation.
func (m *StoreMutation) Payments() (r []string, exists bool) {
	v := m.payments
	if v == nil {
		return
	}
	return *v, true
}

// OldPayments returns the old "payments" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldPayments(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayments: %w", err)
	}
	return oldValue.Payments, nil
}

// AppendPayments adds s to the "payments" field.
func (m *StoreMutation) AppendPayments(s []string) {
	m.appendpayments = append(m.appendpayments, s...)
}

// AppendedPayments returns the list of values that were appended to the "payments" field in this mutation.
func (m *StoreMutation) AppendedPayments() ([]string, bool) {
	if len(m.appendpayments) == 0 {
		return nil, false
	}
	return m.appendpayments, true
}

// ResetPayments resets all changes to the "payments" field.
func (m *StoreMutation) ResetPayments() {
	m.payments = nil
	m.appendpayments = nil
}

// SetScale sets the "scale" field.
func (m *StoreMutation) SetScale(i int) {
	m.scale = &i
	m.addscale = nil
}

// Scale returns the value of the "scale" field in the mutation.
func (m *StoreMutation) Scale() (r int, exists bool) {
	v := m.scale
	if v == nil {
		return
	}
	return *v, true
}

// OldScale returns the old "scale" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldScale(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScale: %w", err)
	}
	return oldValue.Scale, nil
}

// AddScale adds i to the "scale" field.
func (m *StoreMutation) AddScale(i int) {
	if m.addscale != nil {
		*m.addscale += i
	} else {
		m.addscale = &i
	}
}

// AddedScale returns the value that was added to the "scale" field in this mutation.
func (m *StoreMutation) AddedScale() (r int, exists bool) {
	v := m.addscale
	if v == nil {
		return
	}
	return *v, true
}

// ResetScale resets all changes to the "scale" field.
func (m *StoreMutation) ResetScale() {
	m.scale = nil
	m.addscale = nil
}

// SetAddress sets the "address" field.
func (m *StoreMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *StoreMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *StoreMutation) ResetAddress() {
	m.address = nil
}

// SetRating sets the "rating" field.
func (m *StoreMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *StoreMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *StoreMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *StoreMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *StoreMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetNearbyStores sets the "nearby_stores" field.
func (m *StoreMutation) SetNearbyStores(s []string) {
	m.nearby_stores = &s
	m.appendnearby_stores = nil
}

// NearbyStores returns the value of the "nearby_stores" field in the mutation.
func (m *StoreMutation) NearbyStores() (r []string, exists bool) {
	v := m.nearby_stores
	if v == nil {
		return
	}
	return *v, true
}

// OldNearbyStores returns the old "nearby_stores" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldNearbyStores(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNearbyStores is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNearbyStores requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNearbyStores: %w", err)
	}
	return oldValue.NearbyStores, nil
}

// AppendNearbyStores adds s to the "nearby_stores" field.
func (m *StoreMutation) AppendNearbyStores(s []string) {
	m.appendnearby_stores = append(m.appendnearby_stores, s...)
}

// AppendedNearbyStores returns the list of values that were appended to the "nearby_stores" field in this mutation.
func (m *StoreMutation) AppendedNearbyStores() ([]string, bool) {
	if len(m.appendnearby_stores) == 0 {
		return nil, false
	}
	return m.appendnearby_stores, true
}

// ResetNearbyStores resets all changes to the "nearby_stores" field.
func (m *StoreMutation) ResetNearbyStores() {
	m.nearby_stores = nil
	m.appendnearby_stores = nil
}

// SetBusinessHours sets the "business_hours" field.
func (m *StoreMutation) SetBusinessHours(i []int) {
	m.business_hours = &i
	m.appendbusiness_hours = nil
}

// BusinessHours returns the value of the "business_hours" field in the mutation.
func (m *StoreMutation) BusinessHours() (r []int, exists bool) {
	v := m.business_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessHours returns the old "business_hours" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldBusinessHours(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessHours: %w", err)
	}
	return oldValue.BusinessHours, nil
}

// AppendBusinessHours adds i to the "business_hours" field.
func (m *StoreMutation) AppendBusinessHours(i []int) {
	m.appendbusiness_hours = append(m.appendbusiness_hours, i...)
}

// AppendedBusinessHours returns the list of values that were appended to the "business_hours" field in this mutation.
func (m *StoreMutation) AppendedBusinessHours() ([]int, bool) {
	if len(m.appendbusiness_hours) == 0 {
		return nil, false
	}
	return m.appendbusiness_hours, true
}

// ResetBusinessHours resets all changes to the "business_hours" field.
func (m *StoreMutation) ResetBusinessHours() {
	m.business_hours = nil
	m.appendbusiness_hours = nil
}

// SetTypes sets the "types" field.
func (m *StoreMutation) SetTypes(s []string) {
	m.types = &s
	m.appendtypes = nil
}

// Types returns the value of the "types" field in the mutation.
func (m *StoreMutation) Types() (r []string, exists bool) {
	v := m.types
	if v == nil {
		return
	}
	return *v, true
}

// OldTypes returns the old "types" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldTypes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypes: %w", err)
	}
	return oldValue.Types, nil
}

// AppendTypes adds s to the "types" field.
func (m *StoreMutation) AppendTypes(s []string) {
	m.appendtypes = append(m.appendtypes, s...)
}

// AppendedTypes returns the list of values that were appended to the "types" field in this mutation.
func (m *StoreMutation) AppendedTypes() ([]string, bool) {
	if len(m.appendtypes) == 0 {
		return nil, false
	}
	return m.appendtypes, true
}

// ResetTypes resets all changes to the "types" field.
func (m *StoreMutation) ResetTypes() {
	m.types = nil
	m.appendtypes = nil
}

// AddRecordIDs adds the "record" edge to the Record entity by ids.
func (m *StoreMutation) AddRecordIDs(ids ...string) {
	if m.record == nil {
		m.record = make(map[string]struct{})
	}
	for i := range ids {
		m.record[ids[i]] = struct{}{}
	}
}

// ClearRecord clears the "record" edge to the Record entity.
func (m *StoreMutation) ClearRecord() {
	m.clearedrecord = true
}

// RecordCleared reports if the "record" edge to the Record entity was cleared.
func (m *StoreMutation) RecordCleared() bool {
	return m.clearedrecord
}

// RemoveRecordIDs removes the "record" edge to the Record entity by IDs.
func (m *StoreMutation) RemoveRecordIDs(ids ...string) {
	if m.removedrecord == nil {
		m.removedrecord = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.record, ids[i])
		m.removedrecord[ids[i]] = struct{}{}
	}
}

// RemovedRecord returns the removed IDs of the "record" edge to the Record entity.
func (m *StoreMutation) RemovedRecordIDs() (ids []string) {
	for id := range m.removedrecord {
		ids = append(ids, id)
	}
	return
}

// RecordIDs returns the "record" edge IDs in the mutation.
func (m *StoreMutation) RecordIDs() (ids []string) {
	for id := range m.record {
		ids = append(ids, id)
	}
	return
}

// ResetRecord resets all changes to the "record" edge.
func (m *StoreMutation) ResetRecord() {
	m.record = nil
	m.clearedrecord = false
	m.removedrecord = nil
}

// Where appends a list predicates to the StoreMutation builder.
func (m *StoreMutation) Where(ps ...predicate.Store) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Store, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Store).
func (m *StoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoreMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, store.FieldName)
	}
	if m.category_id != nil {
		fields = append(fields, store.FieldCategoryID)
	}
	if m.sub_category_id != nil {
		fields = append(fields, store.FieldSubCategoryID)
	}
	if m.price != nil {
		fields = append(fields, store.FieldPrice)
	}
	if m.payments != nil {
		fields = append(fields, store.FieldPayments)
	}
	if m.scale != nil {
		fields = append(fields, store.FieldScale)
	}
	if m.address != nil {
		fields = append(fields, store.FieldAddress)
	}
	if m.rating != nil {
		fields = append(fields, store.FieldRating)
	}
	if m.nearby_stores != nil {
		fields = append(fields, store.FieldNearbyStores)
	}
	if m.business_hours != nil {
		fields = append(fields, store.FieldBusinessHours)
	}
	if m.types != nil {
		fields = append(fields, store.FieldTypes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case store.FieldName:
		return m.Name()
	case store.FieldCategoryID:
		return m.CategoryID()
	case store.FieldSubCategoryID:
		return m.SubCategoryID()
	case store.FieldPrice:
		return m.Price()
	case store.FieldPayments:
		return m.Payments()
	case store.FieldScale:
		return m.Scale()
	case store.FieldAddress:
		return m.Address()
	case store.FieldRating:
		return m.Rating()
	case store.FieldNearbyStores:
		return m.NearbyStores()
	case store.FieldBusinessHours:
		return m.BusinessHours()
	case store.FieldTypes:
		return m.Types()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case store.FieldName:
		return m.OldName(ctx)
	case store.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case store.FieldSubCategoryID:
		return m.OldSubCategoryID(ctx)
	case store.FieldPrice:
		return m.OldPrice(ctx)
	case store.FieldPayments:
		return m.OldPayments(ctx)
	case store.FieldScale:
		return m.OldScale(ctx)
	case store.FieldAddress:
		return m.OldAddress(ctx)
	case store.FieldRating:
		return m.OldRating(ctx)
	case store.FieldNearbyStores:
		return m.OldNearbyStores(ctx)
	case store.FieldBusinessHours:
		return m.OldBusinessHours(ctx)
	case store.FieldTypes:
		return m.OldTypes(ctx)
	}
	return nil, fmt.Errorf("unknown Store field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case store.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case store.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case store.FieldSubCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubCategoryID(v)
		return nil
	case store.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case store.FieldPayments:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayments(v)
		return nil
	case store.FieldScale:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScale(v)
		return nil
	case store.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case store.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case store.FieldNearbyStores:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNearbyStores(v)
		return nil
	case store.FieldBusinessHours:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessHours(v)
		return nil
	case store.FieldTypes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypes(v)
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoreMutation) AddedFields() []string {
	var fields []string
	if m.addcategory_id != nil {
		fields = append(fields, store.FieldCategoryID)
	}
	if m.addsub_category_id != nil {
		fields = append(fields, store.FieldSubCategoryID)
	}
	if m.addprice != nil {
		fields = append(fields, store.FieldPrice)
	}
	if m.addscale != nil {
		fields = append(fields, store.FieldScale)
	}
	if m.addrating != nil {
		fields = append(fields, store.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case store.FieldCategoryID:
		return m.AddedCategoryID()
	case store.FieldSubCategoryID:
		return m.AddedSubCategoryID()
	case store.FieldPrice:
		return m.AddedPrice()
	case store.FieldScale:
		return m.AddedScale()
	case store.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case store.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryID(v)
		return nil
	case store.FieldSubCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubCategoryID(v)
		return nil
	case store.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case store.FieldScale:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScale(v)
		return nil
	case store.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown Store numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Store nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoreMutation) ResetField(name string) error {
	switch name {
	case store.FieldName:
		m.ResetName()
		return nil
	case store.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case store.FieldSubCategoryID:
		m.ResetSubCategoryID()
		return nil
	case store.FieldPrice:
		m.ResetPrice()
		return nil
	case store.FieldPayments:
		m.ResetPayments()
		return nil
	case store.FieldScale:
		m.ResetScale()
		return nil
	case store.FieldAddress:
		m.ResetAddress()
		return nil
	case store.FieldRating:
		m.ResetRating()
		return nil
	case store.FieldNearbyStores:
		m.ResetNearbyStores()
		return nil
	case store.FieldBusinessHours:
		m.ResetBusinessHours()
		return nil
	case store.FieldTypes:
		m.ResetTypes()
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.record != nil {
		edges = append(edges, store.EdgeRecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeRecord:
		ids := make([]ent.Value, 0, len(m.record))
		for id := range m.record {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecord != nil {
		edges = append(edges, store.EdgeRecord)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeRecord:
		ids := make([]ent.Value, 0, len(m.removedrecord))
		for id := range m.removedrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecord {
		edges = append(edges, store.EdgeRecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoreMutation) EdgeCleared(name string) bool {
	switch name {
	case store.EdgeRecord:
		return m.clearedrecord
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Store unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoreMutation) ResetEdge(name string) error {
	switch name {
	case store.EdgeRecord:
		m.ResetRecord()
		return nil
	}
	return fmt.Errorf("unknown Store edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *string
	age             *int
	addage          *int
	create_at       *time.Time
	latest_login_at *time.Time
	clearedFields   map[string]struct{}
	record          map[string]struct{}
	removedrecord   map[string]struct{}
	clearedrecord   bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetCreateAt sets the "create_at" field.
func (m *UserMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetLatestLoginAt sets the "latest_login_at" field.
func (m *UserMutation) SetLatestLoginAt(t time.Time) {
	m.latest_login_at = &t
}

// LatestLoginAt returns the value of the "latest_login_at" field in the mutation.
func (m *UserMutation) LatestLoginAt() (r time.Time, exists bool) {
	v := m.latest_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestLoginAt returns the old "latest_login_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLatestLoginAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatestLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatestLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestLoginAt: %w", err)
	}
	return oldValue.LatestLoginAt, nil
}

// ResetLatestLoginAt resets all changes to the "latest_login_at" field.
func (m *UserMutation) ResetLatestLoginAt() {
	m.latest_login_at = nil
}

// AddRecordIDs adds the "record" edge to the Record entity by ids.
func (m *UserMutation) AddRecordIDs(ids ...string) {
	if m.record == nil {
		m.record = make(map[string]struct{})
	}
	for i := range ids {
		m.record[ids[i]] = struct{}{}
	}
}

// ClearRecord clears the "record" edge to the Record entity.
func (m *UserMutation) ClearRecord() {
	m.clearedrecord = true
}

// RecordCleared reports if the "record" edge to the Record entity was cleared.
func (m *UserMutation) RecordCleared() bool {
	return m.clearedrecord
}

// RemoveRecordIDs removes the "record" edge to the Record entity by IDs.
func (m *UserMutation) RemoveRecordIDs(ids ...string) {
	if m.removedrecord == nil {
		m.removedrecord = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.record, ids[i])
		m.removedrecord[ids[i]] = struct{}{}
	}
}

// RemovedRecord returns the removed IDs of the "record" edge to the Record entity.
func (m *UserMutation) RemovedRecordIDs() (ids []string) {
	for id := range m.removedrecord {
		ids = append(ids, id)
	}
	return
}

// RecordIDs returns the "record" edge IDs in the mutation.
func (m *UserMutation) RecordIDs() (ids []string) {
	for id := range m.record {
		ids = append(ids, id)
	}
	return
}

// ResetRecord resets all changes to the "record" edge.
func (m *UserMutation) ResetRecord() {
	m.record = nil
	m.clearedrecord = false
	m.removedrecord = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.create_at != nil {
		fields = append(fields, user.FieldCreateAt)
	}
	if m.latest_login_at != nil {
		fields = append(fields, user.FieldLatestLoginAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldCreateAt:
		return m.CreateAt()
	case user.FieldLatestLoginAt:
		return m.LatestLoginAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case user.FieldLatestLoginAt:
		return m.OldLatestLoginAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case user.FieldLatestLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestLoginAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAge:
		m.ClearAge()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case user.FieldLatestLoginAt:
		m.ResetLatestLoginAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.record != nil {
		edges = append(edges, user.EdgeRecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecord:
		ids := make([]ent.Value, 0, len(m.record))
		for id := range m.record {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecord != nil {
		edges = append(edges, user.EdgeRecord)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecord:
		ids := make([]ent.Value, 0, len(m.removedrecord))
		for id := range m.removedrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecord {
		edges = append(edges, user.EdgeRecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRecord:
		return m.clearedrecord
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRecord:
		m.ResetRecord()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
