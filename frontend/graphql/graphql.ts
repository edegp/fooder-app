/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: any
  /** The builtin Time type */
  Time: any
}

/**
 * CreateRecordInput is used for create Record object.
 * Input was generated by ent.
 */
export type CreateRecordInput = {
  evaluation?: InputMaybe<Scalars['Int']>
  leaveAt?: InputMaybe<Scalars['Int']>
  paymentAmount?: InputMaybe<Scalars['Int']>
  storeID: Scalars['ID']
  userID: Scalars['ID']
  visitAt?: InputMaybe<Scalars['Time']>
}

/**
 * CreateStoreInput is used for create Store object.
 * Input was generated by ent.
 */
export type CreateStoreInput = {
  address: Scalars['String']
  businessHours: Array<Scalars['Int']>
  categoryID: Scalars['Int']
  name: Scalars['String']
  nearbyStores: Array<Scalars['String']>
  payments: Array<Scalars['String']>
  price: Scalars['Int']
  rating: Scalars['Int']
  recordIDs?: InputMaybe<Array<Scalars['ID']>>
  scale: Scalars['Int']
  subCategoryID: Scalars['Int']
  types: Array<Scalars['String']>
}

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  age?: InputMaybe<Scalars['Int']>
  createAt?: InputMaybe<Scalars['Time']>
  latestLoginAt?: InputMaybe<Scalars['Time']>
  recordIDs?: InputMaybe<Array<Scalars['ID']>>
}

export type Mutation = {
  __typename?: 'Mutation'
  createRecord?: Maybe<Record>
  createUser?: Maybe<User>
  registerStore?: Maybe<Store>
  updateRecord?: Maybe<Record>
  updateStore?: Maybe<Store>
  updateUser?: Maybe<User>
}

export type MutationCreateRecordArgs = {
  placeID: Scalars['String']
  userID: Scalars['String']
}

export type MutationCreateUserArgs = {
  age?: InputMaybe<Scalars['String']>
  idToken: Scalars['String']
}

export type MutationRegisterStoreArgs = {
  id: Scalars['String']
  name: Scalars['String']
}

export type MutationUpdateRecordArgs = {
  evaluation?: InputMaybe<Scalars['Int']>
  id: Scalars['String']
  paymentAmount?: InputMaybe<Scalars['Int']>
  placeID?: InputMaybe<Scalars['String']>
  userID?: InputMaybe<Scalars['String']>
}

export type MutationUpdateStoreArgs = {
  id: Scalars['String']
}

export type MutationUpdateUserArgs = {
  id: Scalars['String']
}

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']
}

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo'
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>
}

export type Query = {
  __typename?: 'Query'
  getPlaceRecords?: Maybe<Array<Maybe<Record>>>
  getStoreById?: Maybe<Store>
  getUserParticularPlaceRecords?: Maybe<Array<Maybe<Record>>>
  getUserRecords?: Maybe<Array<Maybe<Record>>>
  /** Fetches an object given its ID. */
  node?: Maybe<Node>
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>
  records: Array<Record>
  stores: Array<Store>
  users: Array<User>
}

export type QueryGetPlaceRecordsArgs = {
  placeID: Scalars['String']
}

export type QueryGetStoreByIdArgs = {
  id: Scalars['String']
}

export type QueryGetUserParticularPlaceRecordsArgs = {
  placeID: Scalars['String']
  userID: Scalars['String']
}

export type QueryGetUserRecordsArgs = {
  userID: Scalars['String']
}

export type QueryNodeArgs = {
  id: Scalars['ID']
}

export type QueryNodesArgs = {
  ids: Array<Scalars['ID']>
}

export type Record = Node & {
  __typename?: 'Record'
  evaluation: Scalars['Int']
  id: Scalars['ID']
  leaveAt?: Maybe<Scalars['Int']>
  paymentAmount?: Maybe<Scalars['Int']>
  placeID: Scalars['ID']
  store: Store
  user: User
  userID: Scalars['ID']
  visitAt: Scalars['Time']
}

/** Ordering options for Record connections */
export type RecordOrder = {
  /** The ordering direction. */
  direction?: OrderDirection
  /** The field by which to order Records. */
  field: RecordOrderField
}

/** Properties by which Record connections can be ordered. */
export enum RecordOrderField {
  Evaluation = 'EVALUATION',
  PaymentAmount = 'PAYMENT_AMOUNT',
  VisitAt = 'VISIT_AT'
}

/**
 * RecordWhereInput is used for filtering Record objects.
 * Input was generated by ent.
 */
export type RecordWhereInput = {
  and?: InputMaybe<Array<RecordWhereInput>>
  /** evaluation field predicates */
  evaluation?: InputMaybe<Scalars['Int']>
  evaluationGT?: InputMaybe<Scalars['Int']>
  evaluationGTE?: InputMaybe<Scalars['Int']>
  evaluationIn?: InputMaybe<Array<Scalars['Int']>>
  evaluationLT?: InputMaybe<Scalars['Int']>
  evaluationLTE?: InputMaybe<Scalars['Int']>
  evaluationNEQ?: InputMaybe<Scalars['Int']>
  evaluationNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** store edge predicates */
  hasStore?: InputMaybe<Scalars['Boolean']>
  hasStoreWith?: InputMaybe<Array<StoreWhereInput>>
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']>
  hasUserWith?: InputMaybe<Array<UserWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** leave_at field predicates */
  leaveAt?: InputMaybe<Scalars['Int']>
  leaveAtGT?: InputMaybe<Scalars['Int']>
  leaveAtGTE?: InputMaybe<Scalars['Int']>
  leaveAtIn?: InputMaybe<Array<Scalars['Int']>>
  leaveAtIsNil?: InputMaybe<Scalars['Boolean']>
  leaveAtLT?: InputMaybe<Scalars['Int']>
  leaveAtLTE?: InputMaybe<Scalars['Int']>
  leaveAtNEQ?: InputMaybe<Scalars['Int']>
  leaveAtNotIn?: InputMaybe<Array<Scalars['Int']>>
  leaveAtNotNil?: InputMaybe<Scalars['Boolean']>
  not?: InputMaybe<RecordWhereInput>
  or?: InputMaybe<Array<RecordWhereInput>>
  /** payment_amount field predicates */
  paymentAmount?: InputMaybe<Scalars['Int']>
  paymentAmountGT?: InputMaybe<Scalars['Int']>
  paymentAmountGTE?: InputMaybe<Scalars['Int']>
  paymentAmountIn?: InputMaybe<Array<Scalars['Int']>>
  paymentAmountIsNil?: InputMaybe<Scalars['Boolean']>
  paymentAmountLT?: InputMaybe<Scalars['Int']>
  paymentAmountLTE?: InputMaybe<Scalars['Int']>
  paymentAmountNEQ?: InputMaybe<Scalars['Int']>
  paymentAmountNotIn?: InputMaybe<Array<Scalars['Int']>>
  paymentAmountNotNil?: InputMaybe<Scalars['Boolean']>
  /** place_id field predicates */
  placeID?: InputMaybe<Scalars['ID']>
  placeIDContains?: InputMaybe<Scalars['ID']>
  placeIDContainsFold?: InputMaybe<Scalars['ID']>
  placeIDEqualFold?: InputMaybe<Scalars['ID']>
  placeIDGT?: InputMaybe<Scalars['ID']>
  placeIDGTE?: InputMaybe<Scalars['ID']>
  placeIDHasPrefix?: InputMaybe<Scalars['ID']>
  placeIDHasSuffix?: InputMaybe<Scalars['ID']>
  placeIDIn?: InputMaybe<Array<Scalars['ID']>>
  placeIDLT?: InputMaybe<Scalars['ID']>
  placeIDLTE?: InputMaybe<Scalars['ID']>
  placeIDNEQ?: InputMaybe<Scalars['ID']>
  placeIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** user_id field predicates */
  userID?: InputMaybe<Scalars['ID']>
  userIDContains?: InputMaybe<Scalars['ID']>
  userIDContainsFold?: InputMaybe<Scalars['ID']>
  userIDEqualFold?: InputMaybe<Scalars['ID']>
  userIDGT?: InputMaybe<Scalars['ID']>
  userIDGTE?: InputMaybe<Scalars['ID']>
  userIDHasPrefix?: InputMaybe<Scalars['ID']>
  userIDHasSuffix?: InputMaybe<Scalars['ID']>
  userIDIn?: InputMaybe<Array<Scalars['ID']>>
  userIDLT?: InputMaybe<Scalars['ID']>
  userIDLTE?: InputMaybe<Scalars['ID']>
  userIDNEQ?: InputMaybe<Scalars['ID']>
  userIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** visit_at field predicates */
  visitAt?: InputMaybe<Scalars['Time']>
  visitAtGT?: InputMaybe<Scalars['Time']>
  visitAtGTE?: InputMaybe<Scalars['Time']>
  visitAtIn?: InputMaybe<Array<Scalars['Time']>>
  visitAtLT?: InputMaybe<Scalars['Time']>
  visitAtLTE?: InputMaybe<Scalars['Time']>
  visitAtNEQ?: InputMaybe<Scalars['Time']>
  visitAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type Store = Node & {
  __typename?: 'Store'
  address: Scalars['String']
  businessHours: Array<Scalars['Int']>
  categoryID: Scalars['Int']
  id: Scalars['ID']
  name: Scalars['String']
  nearbyStores: Array<Scalars['String']>
  payments: Array<Scalars['String']>
  price: Scalars['Int']
  rating: Scalars['Int']
  record?: Maybe<Array<Record>>
  scale: Scalars['Int']
  subCategoryID: Scalars['Int']
  types: Array<Scalars['String']>
}

/**
 * StoreWhereInput is used for filtering Store objects.
 * Input was generated by ent.
 */
export type StoreWhereInput = {
  /** address field predicates */
  address?: InputMaybe<Scalars['String']>
  addressContains?: InputMaybe<Scalars['String']>
  addressContainsFold?: InputMaybe<Scalars['String']>
  addressEqualFold?: InputMaybe<Scalars['String']>
  addressGT?: InputMaybe<Scalars['String']>
  addressGTE?: InputMaybe<Scalars['String']>
  addressHasPrefix?: InputMaybe<Scalars['String']>
  addressHasSuffix?: InputMaybe<Scalars['String']>
  addressIn?: InputMaybe<Array<Scalars['String']>>
  addressLT?: InputMaybe<Scalars['String']>
  addressLTE?: InputMaybe<Scalars['String']>
  addressNEQ?: InputMaybe<Scalars['String']>
  addressNotIn?: InputMaybe<Array<Scalars['String']>>
  and?: InputMaybe<Array<StoreWhereInput>>
  /** category_id field predicates */
  categoryID?: InputMaybe<Scalars['Int']>
  categoryIDGT?: InputMaybe<Scalars['Int']>
  categoryIDGTE?: InputMaybe<Scalars['Int']>
  categoryIDIn?: InputMaybe<Array<Scalars['Int']>>
  categoryIDLT?: InputMaybe<Scalars['Int']>
  categoryIDLTE?: InputMaybe<Scalars['Int']>
  categoryIDNEQ?: InputMaybe<Scalars['Int']>
  categoryIDNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** record edge predicates */
  hasRecord?: InputMaybe<Scalars['Boolean']>
  hasRecordWith?: InputMaybe<Array<RecordWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<StoreWhereInput>
  or?: InputMaybe<Array<StoreWhereInput>>
  /** price field predicates */
  price?: InputMaybe<Scalars['Int']>
  priceGT?: InputMaybe<Scalars['Int']>
  priceGTE?: InputMaybe<Scalars['Int']>
  priceIn?: InputMaybe<Array<Scalars['Int']>>
  priceLT?: InputMaybe<Scalars['Int']>
  priceLTE?: InputMaybe<Scalars['Int']>
  priceNEQ?: InputMaybe<Scalars['Int']>
  priceNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** rating field predicates */
  rating?: InputMaybe<Scalars['Int']>
  ratingGT?: InputMaybe<Scalars['Int']>
  ratingGTE?: InputMaybe<Scalars['Int']>
  ratingIn?: InputMaybe<Array<Scalars['Int']>>
  ratingLT?: InputMaybe<Scalars['Int']>
  ratingLTE?: InputMaybe<Scalars['Int']>
  ratingNEQ?: InputMaybe<Scalars['Int']>
  ratingNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** scale field predicates */
  scale?: InputMaybe<Scalars['Int']>
  scaleGT?: InputMaybe<Scalars['Int']>
  scaleGTE?: InputMaybe<Scalars['Int']>
  scaleIn?: InputMaybe<Array<Scalars['Int']>>
  scaleLT?: InputMaybe<Scalars['Int']>
  scaleLTE?: InputMaybe<Scalars['Int']>
  scaleNEQ?: InputMaybe<Scalars['Int']>
  scaleNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** sub_category_id field predicates */
  subCategoryID?: InputMaybe<Scalars['Int']>
  subCategoryIDGT?: InputMaybe<Scalars['Int']>
  subCategoryIDGTE?: InputMaybe<Scalars['Int']>
  subCategoryIDIn?: InputMaybe<Array<Scalars['Int']>>
  subCategoryIDLT?: InputMaybe<Scalars['Int']>
  subCategoryIDLTE?: InputMaybe<Scalars['Int']>
  subCategoryIDNEQ?: InputMaybe<Scalars['Int']>
  subCategoryIDNotIn?: InputMaybe<Array<Scalars['Int']>>
}

/**
 * UpdateRecordInput is used for update Record object.
 * Input was generated by ent.
 */
export type UpdateRecordInput = {
  clearLeaveAt?: InputMaybe<Scalars['Boolean']>
  clearPaymentAmount?: InputMaybe<Scalars['Boolean']>
  clearStore?: InputMaybe<Scalars['Boolean']>
  clearUser?: InputMaybe<Scalars['Boolean']>
  evaluation?: InputMaybe<Scalars['Int']>
  leaveAt?: InputMaybe<Scalars['Int']>
  paymentAmount?: InputMaybe<Scalars['Int']>
  storeID?: InputMaybe<Scalars['ID']>
  userID?: InputMaybe<Scalars['ID']>
  visitAt?: InputMaybe<Scalars['Time']>
}

/**
 * UpdateStoreInput is used for update Store object.
 * Input was generated by ent.
 */
export type UpdateStoreInput = {
  addRecordIDs?: InputMaybe<Array<Scalars['ID']>>
  address?: InputMaybe<Scalars['String']>
  appendBusinessHours?: InputMaybe<Array<Scalars['Int']>>
  appendNearbyStores?: InputMaybe<Array<Scalars['String']>>
  appendPayments?: InputMaybe<Array<Scalars['String']>>
  appendTypes?: InputMaybe<Array<Scalars['String']>>
  businessHours?: InputMaybe<Array<Scalars['Int']>>
  categoryID?: InputMaybe<Scalars['Int']>
  clearRecord?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  nearbyStores?: InputMaybe<Array<Scalars['String']>>
  payments?: InputMaybe<Array<Scalars['String']>>
  price?: InputMaybe<Scalars['Int']>
  rating?: InputMaybe<Scalars['Int']>
  removeRecordIDs?: InputMaybe<Array<Scalars['ID']>>
  scale?: InputMaybe<Scalars['Int']>
  subCategoryID?: InputMaybe<Scalars['Int']>
  types?: InputMaybe<Array<Scalars['String']>>
}

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  addRecordIDs?: InputMaybe<Array<Scalars['ID']>>
  age?: InputMaybe<Scalars['Int']>
  clearAge?: InputMaybe<Scalars['Boolean']>
  clearRecord?: InputMaybe<Scalars['Boolean']>
  latestLoginAt?: InputMaybe<Scalars['Time']>
  removeRecordIDs?: InputMaybe<Array<Scalars['ID']>>
}

export type User = Node & {
  __typename?: 'User'
  age?: Maybe<Scalars['Int']>
  createAt: Scalars['Time']
  id: Scalars['ID']
  latestLoginAt: Scalars['Time']
  record?: Maybe<Array<Record>>
}

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection
  /** The field by which to order Users. */
  field: UserOrderField
}

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  Age = 'AGE',
  CreatedAt = 'CREATED_AT',
  LatestLoginAt = 'LATEST_LOGIN_AT'
}

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  /** age field predicates */
  age?: InputMaybe<Scalars['Int']>
  ageGT?: InputMaybe<Scalars['Int']>
  ageGTE?: InputMaybe<Scalars['Int']>
  ageIn?: InputMaybe<Array<Scalars['Int']>>
  ageIsNil?: InputMaybe<Scalars['Boolean']>
  ageLT?: InputMaybe<Scalars['Int']>
  ageLTE?: InputMaybe<Scalars['Int']>
  ageNEQ?: InputMaybe<Scalars['Int']>
  ageNotIn?: InputMaybe<Array<Scalars['Int']>>
  ageNotNil?: InputMaybe<Scalars['Boolean']>
  and?: InputMaybe<Array<UserWhereInput>>
  /** create_at field predicates */
  createAt?: InputMaybe<Scalars['Time']>
  createAtGT?: InputMaybe<Scalars['Time']>
  createAtGTE?: InputMaybe<Scalars['Time']>
  createAtIn?: InputMaybe<Array<Scalars['Time']>>
  createAtLT?: InputMaybe<Scalars['Time']>
  createAtLTE?: InputMaybe<Scalars['Time']>
  createAtNEQ?: InputMaybe<Scalars['Time']>
  createAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** record edge predicates */
  hasRecord?: InputMaybe<Scalars['Boolean']>
  hasRecordWith?: InputMaybe<Array<RecordWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** latest_login_at field predicates */
  latestLoginAt?: InputMaybe<Scalars['Time']>
  latestLoginAtGT?: InputMaybe<Scalars['Time']>
  latestLoginAtGTE?: InputMaybe<Scalars['Time']>
  latestLoginAtIn?: InputMaybe<Array<Scalars['Time']>>
  latestLoginAtLT?: InputMaybe<Scalars['Time']>
  latestLoginAtLTE?: InputMaybe<Scalars['Time']>
  latestLoginAtNEQ?: InputMaybe<Scalars['Time']>
  latestLoginAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  not?: InputMaybe<UserWhereInput>
  or?: InputMaybe<Array<UserWhereInput>>
}

export type CreateUserMutationVariables = Exact<{
  idToken: Scalars['String']
}>

export type CreateUserMutation = {
  __typename?: 'Mutation'
  createUser?: { __typename?: 'User'; id: string; createAt: any; latestLoginAt: any } | null
}

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['String']
}>

export type UpdateUserMutation = {
  __typename?: 'Mutation'
  updateUser?: { __typename?: 'User'; id: string; createAt: any; latestLoginAt: any } | null
}

export type CreateRecordMutationVariables = Exact<{
  userID: Scalars['String']
  placeID: Scalars['String']
}>

export type CreateRecordMutation = {
  __typename?: 'Mutation'
  createRecord?: {
    __typename?: 'Record'
    id: string
    userID: string
    placeID: string
    visitAt: any
  } | null
}

export type UpdateRecordMutationVariables = Exact<{
  id: Scalars['String']
  paymentAmount?: InputMaybe<Scalars['Int']>
  evaluation?: InputMaybe<Scalars['Int']>
}>

export type UpdateRecordMutation = {
  __typename?: 'Mutation'
  updateRecord?: {
    __typename?: 'Record'
    id: string
    userID: string
    placeID: string
    leaveAt?: number | null
    paymentAmount?: number | null
    evaluation: number
  } | null
}

export type RegisterStoreMutationVariables = Exact<{
  id: Scalars['String']
  name: Scalars['String']
}>

export type RegisterStoreMutation = {
  __typename?: 'Mutation'
  registerStore?: { __typename?: 'Store'; id: string; name: string } | null
}

export type UpdateStoreMutationVariables = Exact<{
  id: Scalars['String']
}>

export type UpdateStoreMutation = {
  __typename?: 'Mutation'
  updateStore?: { __typename?: 'Store'; id: string; name: string } | null
}

export type GetAllUsersQueryVariables = Exact<{ [key: string]: never }>

export type GetAllUsersQuery = {
  __typename?: 'Query'
  users: Array<{ __typename?: 'User'; id: string; createAt: any; latestLoginAt: any }>
}

export type GetUserRecordsQueryVariables = Exact<{
  userID: Scalars['String']
}>

export type GetUserRecordsQuery = {
  __typename?: 'Query'
  getUserRecords?: Array<{
    __typename?: 'Record'
    id: string
    paymentAmount?: number | null
    evaluation: number
  } | null> | null
}

export type GetPlaceRecordsQueryVariables = Exact<{
  placeID: Scalars['String']
}>

export type GetPlaceRecordsQuery = {
  __typename?: 'Query'
  getPlaceRecords?: Array<{
    __typename?: 'Record'
    id: string
    paymentAmount?: number | null
    evaluation: number
  } | null> | null
}

export type GetUserParticularPlaceRecordsQueryVariables = Exact<{
  userID: Scalars['String']
  placeID: Scalars['String']
}>

export type GetUserParticularPlaceRecordsQuery = {
  __typename?: 'Query'
  getUserParticularPlaceRecords?: Array<{
    __typename?: 'Record'
    id: string
    paymentAmount?: number | null
    evaluation: number
  } | null> | null
}

export type GetStoreByIdQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetStoreByIdQuery = {
  __typename?: 'Query'
  getStoreById?: { __typename?: 'Store'; id: string } | null
}

export const CreateUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'idToken' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'idToken' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'idToken' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'latestLoginAt' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<CreateUserMutation, CreateUserMutationVariables>
export const UpdateUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'latestLoginAt' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>
export const CreateRecordDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateRecord' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createRecord' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'userID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } }
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'placeID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'userID' } },
                { kind: 'Field', name: { kind: 'Name', value: 'placeID' } },
                { kind: 'Field', name: { kind: 'Name', value: 'visitAt' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<CreateRecordMutation, CreateRecordMutationVariables>
export const UpdateRecordDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateRecord' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'paymentAmount' } },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'evaluation' } },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateRecord' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'userID' } },
                { kind: 'Field', name: { kind: 'Name', value: 'placeID' } },
                { kind: 'Field', name: { kind: 'Name', value: 'leaveAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'paymentAmount' } },
                { kind: 'Field', name: { kind: 'Name', value: 'evaluation' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<UpdateRecordMutation, UpdateRecordMutationVariables>
export const RegisterStoreDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RegisterStore' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'registerStore' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'name' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'name' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<RegisterStoreMutation, RegisterStoreMutationVariables>
export const UpdateStoreDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateStore' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateStore' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<UpdateStoreMutation, UpdateStoreMutationVariables>
export const GetAllUsersDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAllUsers' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'users' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'latestLoginAt' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<GetAllUsersQuery, GetAllUsersQueryVariables>
export const GetUserRecordsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetUserRecords' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getUserRecords' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'userID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'paymentAmount' } },
                { kind: 'Field', name: { kind: 'Name', value: 'evaluation' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<GetUserRecordsQuery, GetUserRecordsQueryVariables>
export const GetPlaceRecordsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPlaceRecords' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getPlaceRecords' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'placeID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'paymentAmount' } },
                { kind: 'Field', name: { kind: 'Name', value: 'evaluation' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<GetPlaceRecordsQuery, GetPlaceRecordsQueryVariables>
export const GetUserParticularPlaceRecordsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetUserParticularPlaceRecords' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getUserParticularPlaceRecords' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'userID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'userID' } }
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'placeID' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'placeID' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'paymentAmount' } },
                { kind: 'Field', name: { kind: 'Name', value: 'evaluation' } }
              ]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<
  GetUserParticularPlaceRecordsQuery,
  GetUserParticularPlaceRecordsQueryVariables
>
export const GetStoreByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetStoreById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
          }
        }
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getStoreById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
              }
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
            }
          }
        ]
      }
    }
  ]
} as unknown as DocumentNode<GetStoreByIdQuery, GetStoreByIdQueryVariables>
